package com.icourt.lawyercrawlparse.web;

import cn.hutool.core.thread.ThreadUtil;
import com.alibaba.fastjson.JSON;
import com.icourt.lawyercrawlparse.entity.KafkaLawyer;
import com.icourt.lawyercrawlparse.service.IParseService;
import com.jayway.jsonpath.JsonPath;
import lombok.Data;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.beetl.sql.core.SQLManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/")
@Slf4j
public class ParseController {



    @Autowired
    private List<IParseService> parseService;

    @Autowired
    private SQLManager sqlManager;

    @GetMapping("/parse")
    public void parse() throws Exception{

        String ids ="157249,157901,157902,157904,157903,157906,157905,157907,157908,168798,168881,170565,170642,170852,171056,172081,172465,172548,173762,174000,174039,176060,176341,176970,177059,179539,180043,180124,180200,180305,180306,180307,180308,180311,180312,180313,180310,180314,180315,180317,180316,180318,180323,180319,180322,180321,180320,180325,180378,180379,180381,180382,180384,180383,180385,180389,180386,180387,180390,180393,180391,180392,180394,180397,180399,180398,180395,180396,180450,180451,180453,180454,180455,180456,180459,180458,180461,180460,180462,180463,180466,180465,180468,180467,180469,180471,180470,180522,180525,180524,180523,180526,180529,180530,180527,180528,180535,180534,180531,180533,180536,180539,180538,180540,180542,180541,180594,180595,180596,180597,180599,180600,180598,180605,180604,180602,180606,180609,180607,180608,180611,180612,180613,180614,180615,180669,180668,180666,180670,180674,180672,180671,180677,180678,180676,180679,180675,180681,180684,180683,180682,180686,180687,180741,180739,180738,180740,180744,180742,180743,180745,180750,180748,180751,180749,180747,180753,180752,180754,180759,180757,180758,180810,180811,180812,180813,180815,180816,180820,180821,180819,180822,180824,180825,180826,180823,180827,180828,180831,180829,180830,180882,180883,180884,180886,180887,180888,180890,180889,180891,180893,180885,180892,180894,180898,180899,180897,180896,180901,180900,180902,180903,180955,180957,180956,180958,180959,180960,180961,180962,180964,180963,180965,180968,180967,180966,180969,180972,180973,180975,180971,180974,181026,181027,181030,181029,181028,181031,181032,181033,181034,181035,181039,181041,181040,181043,181042,181046,181047,181044,181098,181102,181100,181107,181105,181103,181104,181106,181110,181111,181112,181114,181113,181108,181118,181117,181170,181172,181171,181173,181177,181178,181175,181179,181174,181182,181181,181183,181186,181184,181189,181188,181190,181243,181244,181245,181242,181246,181248,181247,181251,181252,181250,181254,181253,181257,181255,181258,181259,181260,181262,181261,181314,181315,181316,181319,181318,181317,181324,181323,181322,181321,181327,181326,181325,181329,181330,181331,181333,181334,181386,181388,181390,181389,181387,181393,181394,181391,181395,181398,181396,181397,181399,181402,181400,181403,181401,181404,181406,181405,181454,181456,181455,181457,181459,181461,181458,181463,181464,181467,181466,181469,181470,181468,181472,181473,181474,181526,181527,181528,181529,181532,181530,181531,181533,181535,181537,181536,181538,181534,181540,181543,181539,181542,181544,181546,181545,181598,181599,181600,181601,181602,181603,181604,181605,181606,181609,181607,181611,181612,181613,181614,181616,181617,181618,181674,181676,181677,181679,181680,181678,181682,181681,181687,181685,181683,181688,181689,181691,181686,181692,181693,181694,181746,181748,181750,181749,181752,181753,181754,181751,181756,181755,181757,181761,181764,181765,181760,181763,181818,181819,181821,181820,181822,181824,181823,181826,181828,181829,181827,181830,181834,181831,181836,181837,181838,181839,181835,181890,181891,181896,181892,181895,181899,181897,181893,181900,181902,181901,181904,181903,181908,181905,181907,181906,181909,181911,181910,181963,181962,181964,181965,181966,181967,181968,181970,181969,181971,181972,181973,181975,181977,181974,181976,181978,181980,181982,181979,181981,181983,182035,182034,182036,182037,182038,182039,182043,182040,182044,182042,182041,182047,182046,182048,182045,182050,182049,182051,182052,182053,182054,182107,182106,182109,182108,182110,182111,182114,182112,182115,182113,182118,182116,182119,182117,182120,182122,182123,182121,182124,182125,182127,182179,182181,182182,182180,182183,182184,182185,182186,182189,182192,182190,182191,182194,182195,182193,182196,182197,182198,182199,182200,182251,182252,182253,182254,182255,182256,182257,182260,182258,182261,182263,182265,182264,182266,182267,182269,182270,182271,182272,182323,182324,182325,182327,182326,182332,182328,182333,182329,182331,182334,182335,182337,182338,182341,182336,182340,182339,182342,182343,182395,182396,182397,182398,182399,182400,182403,182401,182404,182410,182409,182406,182407,182413,182414,182411,182416,182467,182468,182469,182470,182472,182474,182473,182476,182478,182475,182477,182479,182480,182481,182483,182482,182487,182484,182488,182539,182540,182541,182544,182542,182545,182543,182547,182548,182549,182550,182551,182552,182553,182558,182555,182559,182556,182557,182560";
//        String ids ="157249,157901";
        List<String> collect = Arrays.stream(ids.split(",")).collect(Collectors.toList());
        List<KafkaLawyer> all = collect.stream().map(e -> {
            KafkaLawyer lawyer = new KafkaLawyer();
            lawyer.setId(Integer.valueOf(e));
            return lawyer;
        }).collect(Collectors.toList());


//        KafkaLawyer kafkaLawyer =new KafkaLawyer();
//        List<KafkaLawyer> all = sqlManager.lambdaQuery(KafkaLawyer.class).orderBy(KafkaLawyer::getId).select("id");

        ThreadPoolExecutor threadPoolExecutor = ThreadUtil.newExecutor(5, 5);

        AtomicInteger total = new AtomicInteger(all.size());
        List<Integer> list = new ArrayList<>();
        List<Exception> exlist = new ArrayList<>();
        for (KafkaLawyer e : all) {

            threadPoolExecutor.execute(()-> {
                try {
                    execute(e);
                } catch (Exception ex) {
                    exlist.add(ex);
                    list.add(e.getId());
                    ex.printStackTrace();
                }finally {
                    int i = total.decrementAndGet();
                    if(i==0||i==1){
                        for (Exception exception : exlist) {
                            exception.printStackTrace();
                        }
                        log.info("完成---：{}",list);
                    }
                }
            });

        }
    }



    private void execute(KafkaLawyer e) throws Exception {
        e =sqlManager.unique(KafkaLawyer.class,e.getId());
        String message = e.getMessage();
        for (IParseService iParseService : parseService) {
            String html = JsonPath.parse(message).read("allTextHtml");
            Map parse = iParseService.parse(e,html);
            if(MapUtils.isNotEmpty(parse)){
                e.setJsonContent(JSON.toJSONString(parse));
                String name = iParseService.getClass().getName();
                e.setDateType(name);
                sqlManager.updateById(e);

            }

        }
    }

}
